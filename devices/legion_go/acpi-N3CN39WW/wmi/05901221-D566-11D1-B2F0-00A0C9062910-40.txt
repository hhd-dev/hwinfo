class WMIEvent : __ExtrinsicEvent {
};

[WMI, Locale("MS\\0x409"), Description("This class contains the definition of the package used in other classes"), guid("{ABBC0F58-8EA1-11d1-00A0-C90629100000}")]
class OIDPackage {
  [WmiDataId(1), read, write, Description("Number of ID")] uint8 Length;
  [WmiDataId(2), read, write, Description("64*4 bytes of data")] uint32 ID[64];
  [WmiDataId(3), read, write, Description("64*4 bytes of data")] uint32 property[64];
  [WmiDataId(4), read, write, Description("64 strings")] string IDstring[64];
};

[WMI, Locale("MS\\0x409"), Description("This class contains the definition of the package used in other classes"), guid("{ABBC0F65-8EA1-11d1-00A0-C90629100000}")]
class GetdValuesPackage {
  [WmiDataId(1), read, write, Description("ID")] uint32 ID;
  [WmiDataId(2), read, write, Description("Current")] uint32 Current;
  [WmiDataId(3), read, write, Description("Number of ID")] uint32 Length;
  [WmiDataId(4), read, write, Description("100*4 bytes of data")] uint32 DValuesBuffer[100];
};

[WMI, Locale("MS\\0x409"), Description("This class contains the definition of the package used in other classes"), guid("{7BF6AE1F-85CC-4ee5-94FD-394B5FE7E710}")]
class OutBuffer {
  [WmiDataId(1), read, write, Description("ID")] uint8 result[200];
};

[WMI, Locale("MS\\0x409"), Description("This class contains the definition of the package used in other classes"), guid("{F7B20E14-30F4-41FA-BDF9-77DC09CFFFF1}")]
class DimmSpdBuffer {
  [WmiDataId(1), read, write, Description("ID")] uint8 DimmSpd[532];
};

[WMI, Locale("MS\\0x409"), Description("This class contains the definition of the package used in other classes"), guid("{ABBC0F63-8EA1-11d1-00A0-C90629100000}")]
class GetMinMaxSteppingPackage {
  [WmiDataId(1), read, write, Description("ID")] uint32 Value;
  [WmiDataId(2), read, write, Description("Current")] uint32 Current;
  [WmiDataId(3), read, write, Description("Min")] uint32 Min;
  [WmiDataId(4), read, write, Description("Max")] uint32 Max;
  [WmiDataId(5), read, write, Description("Stepping")] uint32 Stepping;
};

[WMI, Locale("MS\\0x409"), Description("This class contains the definition of RMP data"), guid("{ABBC0F66-8EAA-11d1-00A0-C90629100000}")]
class RMPPackage {
  [WmiDataId(1), read, write, Description("Is RMP available")] uint8 IsRmpAvailable;
  [WmiDataId(2), read, write, Description("Number of RMP Profiles")] uint8 NumberOfProfiles;
  [WmiDataId(3), read, write, Description("Basic Info : Profile Enable State in RMP SPD ")] uint8 IsProfileEnable[2];
  [WmiDataId(4), read, write, Description("Basic Info : Profile Memory Clock units MHz")] uint16 MemoryClock[2];
  [WmiDataId(5), read, write, Description("Basic Info : CAS Latency in CLK")] uint16 CASLatency[2];
  [WmiDataId(6), read, write, Description("RMP SPD Data")] uint8 Data[128];
};

[WMI, Dynamic, Provider("WmiProv"), Locale("MS\\0x409"), Description("Class to Query/Set a CLKValue"), guid("{ABBC0F6a-8EA1-11d1-00A0-C90629100000}")]
class AMD_ACPI {
  [key, read] string InstanceName;
  [read] boolean Active;

  [WmiMethodId(1), Implemented, read, write, Description("Get version")] void QueryVersion([out, Description("version")] uint32 version);
  [WmiMethodId(2), Implemented, read, write, Description("WMI function init.")] void Init([out, Description("status")] uint8 status);
  [WmiMethodId(3), Implemented, read, write, Description("Get BIOS ACPI support function table.")] void GetObjectID([out, Description("Get BIOS support Object ID table")] OIDPackage pack);
  [WmiMethodId(4), Implemented, read, write, Description("Bios request data")] void Getdvalues([in, Description("ID used to identify")] uint32 ID, [out, Description("status")] GetdValuesPackage pack);
  [WmiMethodId(5), Implemented, read, write, Description("Command Run")] void RunCommand([in, Description("In buffer")] uint8 Inbuf[8], [out, Description("Out buffer")] OutBuffer Outbuf);
  [WmiMethodId(6), Implemented, read, write, Description("Get Min/Max/Stepping values")] void GetMinMaxSteppingValues([in, Description("ID used to identify")] uint32 ID, [out, Description("status")] GetMinMaxSteppingPackage pack);
  [WmiMethodId(7), Implemented, read, write, Description("Get DIMM SPD data")] void GetDimmSpdData([in, Description("DIMM Index")] uint32 Index, [out, Description("SPD Data Buffer")] DimmSpdBuffer DimmSpdData);
  [WmiMethodId(8), Implemented, read, write, Description("Get BIOS ACPI support function table2.")] void GetObjectID2([out, Description("Get BIOS support Object ID table2")] OIDPackage pack);
  [WmiMethodId(9), Implemented, read, write, Description("Get RMP table")] void GetRmpData([out, Description("Get RMP table")] RMPPackage pack);
};
